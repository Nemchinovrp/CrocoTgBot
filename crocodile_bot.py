import random
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ß—Ç–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
with open('words.txt', 'r', encoding='utf-8') as f:
    WORDS = [word.strip() for word in f.readlines() if word.strip()]

# –ß—Ç–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
try:
    with open('wow.txt', 'r', encoding='utf-8') as f:
        WOW_PHRASES = [phrase.strip() for phrase in f.readlines() if phrase.strip()]
except FileNotFoundError:
    logger.warning("–§–∞–π–ª wow.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã")
    WOW_PHRASES = [
        "–í–∞—É, —ç—Ç–æ –±—ã–ª–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!",
        "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!",
        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
        "–ë—Ä–∞–≤–æ!",
        "–¢—ã –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–∏–π!",
        "–ö–∞–∫ —Ç–µ–±–µ —ç—Ç–æ —É–¥–∞–ª–æ—Å—å?",
        "–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏!",
        "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ!"
    ]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
game_states = {}


class GameState:
    def __init__(self):
        self.current_word = None
        self.current_leader = None
        self.current_word_index = None
        self.message_id = None
        self.guessed = False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = update.effective_chat.id
    if chat_id not in game_states:
        game_states[chat_id] = GameState()

    await update.message.reply_text(
        "üé≠ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –ö—Ä–æ–∫–æ–¥–∏–ª–∞.\n"
        "üîπ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /play\n"
        "üîπ –ö–æ–≥–¥–∞ —Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç!"
    )


async def play(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in game_states:
        game_states[chat_id] = GameState()

    game_state = game_states[chat_id]

    if game_state.current_leader is not None:
        await update.message.reply_text(
            "‚ùó –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –≤–µ–¥—É—â–∏–π –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥."
        )
        return

    word_index = random.randint(0, len(WORDS) - 1)
    game_state.current_word = WORDS[word_index]
    game_state.current_word_index = word_index
    game_state.current_leader = user.id
    game_state.guessed = False

    keyboard = [
        [InlineKeyboardButton("üîé –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ", callback_data="show_word")],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="change_word")],
        [InlineKeyboardButton("‚è≠ –ù–µ —Ö–æ—á—É –±—ã—Ç—å –≤–µ–¥—É—â–∏–º", callback_data="pass_turn")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await context.bot.send_message(
        chat_id=chat_id,
        text=f"üé® <a href='tg://user?id={user.id}'>{user.full_name}</a> –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–≤–æ!",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

    game_state.message_id = msg.message_id


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    user = query.from_user

    if chat_id not in game_states:
        await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play", show_alert=True)
        return

    game_state = game_states[chat_id]

    if user.id != game_state.current_leader:
        await query.answer("‚õî –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    if query.data == "show_word":
        await query.answer(f"üîê –í–∞—à–µ —Å–ª–æ–≤–æ: {game_state.current_word}", show_alert=True)
    elif query.data == "change_word":
        new_index = random.randint(0, len(WORDS) - 1)
        while new_index == game_state.current_word_index:
            new_index = random.randint(0, len(WORDS) - 1)

        game_state.current_word = WORDS[new_index]
        game_state.current_word_index = new_index

        await query.answer(f"üîÑ –°–ª–æ–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {game_state.current_word}", show_alert=True)
    elif query.data == "pass_turn":
        game_state.current_leader = None
        game_state.current_word = None
        game_state.current_word_index = None

        await context.bot.delete_message(chat_id=chat_id, message_id=game_state.message_id)

        await query.answer("‚úÖ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.", show_alert=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚è≠ <a href='tg://user?id={user.id}'>{user.full_name}</a> –ø–µ—Ä–µ–¥–∞–ª —Ö–æ–¥.\n"
                 "üé≠ –°–ª–µ–¥—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å /play",
            parse_mode='HTML'
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞"""
    chat_id = update.effective_chat.id
    user = update.effective_user
    message_text = update.message.text

    if chat_id not in game_states:
        return

    game_state = game_states[chat_id]

    if game_state.current_leader is not None and not game_state.guessed:
        normalized_input = re.sub(r'[^\w\s]', '', message_text).strip().lower()
        normalized_word = re.sub(r'[^\w\s]', '', game_state.current_word).strip().lower()

        if normalized_input == normalized_word:
            game_state.guessed = True

            if game_state.message_id:
                await context.bot.delete_message(chat_id=chat_id, message_id=game_state.message_id)

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
            wow_phrase = random.choice(WOW_PHRASES)

            await update.message.reply_text(
                f"üéâüéâüéâ <a href='tg://user?id={user.id}'>{user.full_name}</a> —É–≥–∞–¥–∞–ª(–∞) —Å–ª–æ–≤–æ "
                f"¬´{game_state.current_word}¬ª!\n\n"
                f"üåü {wow_phrase}\n\n"
                f"üèÜ –¢–µ–ø–µ—Ä—å <a href='tg://user?id={user.id}'>{user.full_name}</a> —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–µ–¥—É—â–∏–º!",
                parse_mode='HTML'
            )

            game_state.current_leader = user.id
            game_state.guessed = False
            word_index = random.randint(0, len(WORDS) - 1)
            game_state.current_word = WORDS[word_index]
            game_state.current_word_index = word_index

            keyboard = [
                [InlineKeyboardButton("üîé –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ", callback_data="show_word")],
                [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="change_word")],
                [InlineKeyboardButton("‚è≠ –ù–µ —Ö–æ—á—É –±—ã—Ç—å –≤–µ–¥—É—â–∏–º", callback_data="pass_turn")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"üé® <a href='tg://user?id={user.id}'>{user.full_name}</a> –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–≤–æ!",
                parse_mode='HTML',
                reply_markup=reply_markup
            )

            game_state.message_id = msg.message_id
            return

    if game_state.current_leader == user.id:
        await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)

        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùó‚ùó‚ùó <a href='tg://user?id={user.id}'>{user.full_name}</a>:\n"
                 f"{message_text}",
            parse_mode='HTML'
        )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é –±–æ—Ç–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    application = Application.builder() \
        .token("7734707595:AAExtqroKgYL7rtCKAZPb8sBhFPaxRoAB9A") \
        .post_init(lambda app: app.bot.set_my_commands([])) \
        .build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()


if __name__ == '__main__':
    main()